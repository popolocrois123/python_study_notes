# 現場での顧客生成機能の実装メモ

---

## 1. 現場の開発スタイルについて

* **一から全部作るのではなく、既存の土台に機能をどんどん追加していく**
* 既にあるクラス（`Main`, `Customer`, `CustomerManager`）を活用しながら拡張する
* 実際に動いているものを壊さずに、少しずつ追加・改善していくやり方

---

## 2. 今回やりたいことの流れ（段取り）

1. **CustomerManagerクラスに顧客（Customer）生成の処理を追加**
2. 新しいメソッドを作成し、その中で顧客のインスタンスを生成
3. 生成した顧客をリストに格納して管理
4. 生成場所をマップクラスのエリア情報から決定（ランダムな座標）
5. 生成する顧客の数（最大数）や生成間隔（例：10秒に1人）を設定する
6. Customerが何か動作したらCustomerManagerが報告を受けて次の指示を出す仕組みを作る

---

## 3. MVC設計についての考え方

| 分類         | クラス名            | 役割                    |
| ---------- | --------------- | --------------------- |
| Model      | Customer        | 顧客の状態管理、移動、アニメーション状態  |
|            | CustomerManager | 顧客の生成や管理、待機・削除の管理     |
|            | SeatManager     | 座席割り当て、食事、退店の制御       |
|            | Map（データ部分）      | マップの座標情報、通行判定         |
| View       | Customer（描画）    | スプライト、アニメーション描画       |
|            | Map（描画）         | タイル表示やUI表示            |
| Controller | Main            | 初期化、イベント処理、各マネージャーの仲介 |

---

### MVCにこだわりすぎなくてOK

* Web開発向けのMVCは便利だけど、今回のゲーム開発のようなケースでは完全に当てはまらないことが多い
* 重要なのは「役割を分けて管理しやすくすること」
* Backend（裏側）はModel、Frontend（見た目）はViewというざっくりした分業はあるが、全部厳密にMVCにする必要はない

---

## 4. 状態遷移設計（ステートマシン）

* 顧客は「入店→待機→座席→退店」など状態が変わる
* 状態ごとの処理を表にまとめて管理すると実装が楽になる
* CustomerManagerはその状態管理を補助し、顧客の行動をコントロールする

---

## 5. サンプルコード概要

```python
class CustomerManager:
    def __init__(self, parent, num_customers=2, log_func=None):
        self.parent = parent
        self.log = log_func if log_func else lambda msg: None

        self.batch = self.parent.batch
        self.customers = []

        self.num_customers_to_initialize = num_customers
        self.spawn_timer = 0.0
        self.spawn_interval = 5  # 5秒ごとに生成
        self.max_customers = 10

        self.setup_initial_customers()

    def setup_initial_customers(self):
        for ct in range(self.num_customers_to_initialize):
            self.spawn_customer(ct)

    def spawn_customer(self, count):
        customer_pos = [(2, 1), (4, 2)]  # 生成場所（後でランダム化）

        state = "outside"  # 初期状態

        simple_mover = SimpleMover(
            customer_pos[count],
            customer_pos[count],
            state,
            batch=self.batch,
            log_func=self.log
        )

        self.customers.append(simple_mover)
        self.log(f"【顧客生成】pos: {customer_pos} state: {state}")
```

---

## 6. 宿題・次の課題

### 6-1. マップクラスのエリア情報を取得する

* マップに「生成可能なエリア（座標）」を用意する
* そこからランダムに生成ポイントを決定

### 6-2. 顧客生成時の座標決定を改良する

* `customer_pos = [(2,1), (4,2)]` のように固定ではなく
* ランダムで、かつ**既に生成済みの顧客がいる座標を避ける**実装をする

### 6-3. 顧客生成の仕組みを「カウント無し」で実装する

* 引数に「count」を使わずに顧客を生成できるようにする

---

## 7. 追加のアイデア・余裕があれば

* 入り口座標をセットして、顧客をその位置からスタートさせる
* 顧客を入り口から指定された席まで移動させる（パス探索など）
* ログ出力を標準のprintから`loguru`などのログライブラリに切り替える
* VSCodeのChatGPTプラグインを使って効率アップ

---

## 8. 開発で意識するとよい設計手法まとめ

| 手法             | 向き・不向き | コメント                             |
| -------------- | ------ | -------------------------------- |
| ✅ MVC          | ◎      | PygletなどGUIライブラリとの相性が良く、役割分担しやすい |
| ✅ 状態遷移設計       | ◎      | 顧客の行動を自然に管理しやすい                  |
| ✅ データ駆動設計      | ◯〜◎    | 変更が多い部分をデータで管理して柔軟に対応可能          |
| ⚠️ イベント駆動      | △      | 今の段階ではあまり適していない                  |
| ⚠️ スクリプト駆動     | △      | カスタマイズ性はあるが実装コスト・リスクがある          |
| ⚠️ クリーンアーキテクチャ | △      | 規模が小さいので導入は慎重に                   |

---

## 9. まとめ（初心者向け補足）

* **「既にあるクラスに機能を追加していく」** のが現場のよくある開発スタイル
* **MVCは目安として理解しつつ、必ずしも完全に分ける必要はない**
* **状態遷移（ステートマシン）設計は、ゲームのキャラや顧客の動きを管理しやすい**
* 顧客を「どこで」「何秒ごとに」「何人まで」生成するかを決めることが大事
* 生成場所は「マップのエリア情報からランダムに」選ぶが、既に他の顧客がいる場所は避ける
* ログ出力やデバッグは地味だけど重要！上手に使うと開発がラクになる
